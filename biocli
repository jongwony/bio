#!/usr/bin/env python3
import json
import argparse

from bio import handler
from util import tag, img, query


def search():
    def func(content: str, custom=False, dsl='term', **kwargs):
        if not custom:
            content = getattr(query, dsl)(content)
        else:
            content = json.loads(content)
        result = biotag.search(content)
        print(*tag.extract_search(result, 'tags'), sep='\n')

    p = subparsers.add_parser(search.__name__)
    p.add_argument('content', type=str)
    p.add_argument('-j', '--json', dest='custom', action='store_true')
    p.add_argument('-t', '--type', dest='dsl', type=str, default='term')
    p.set_defaults(func=func)


def edit():
    def func(_id, **kwargs):
        result = biofile.edit(_id)
        print(f'Changed {result.path}')
        print(f'Current tags: {tag.extract_doc(result.tags, "tags")}')
        tags = input('Tags<space>: ').split()
        update_tags = biotag.union_tags(_id, tags)
        print(f'Tag {tag.extract_doc(update_tags, data="result")}')

    p = subparsers.add_parser(edit.__name__)
    p.add_argument('_id', type=str)
    p.set_defaults(func=func)


def temp():
    def func(category, **kwargs):
        try:
            filename, content = handler.temp(category)
            print(f'Saved {filename}')
        except ValueError:
            return
        else:
            tags = input('Tags<space>: ').split()
            es_result = biotag.add_file_tags(filename, tags)
            print(es_result)

    p = subparsers.add_parser(temp.__name__)
    p.add_argument('category', nargs='?', default='md')
    p.set_defaults(func=func)


def imgcat():
    def func(content, inline=1, resize=None, **kwargs):
        if resize is not None:
            content = img.buffer_resize(content, resize)
        print(img.iterm2_img_format(content, inline).decode())

    p = subparsers.add_parser(imgcat.__name__)
    p.add_argument('content', type=str)
    p.add_argument('--resize', nargs=2, type=int)
    p.add_argument('--inline', type=int, default=1)
    p.set_defaults(func=func)


if __name__ == '__main__':
    biotag = tag.init()
    biofile = handler.BioFile()

    version_string = ''
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers()
    # TODO: Enhance Modularization
    temp()
    imgcat()
    search()
    edit()
    namespace = parser.parse_args()
    namespace.func(**vars(namespace))
